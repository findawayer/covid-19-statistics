{"version":3,"sources":["utils/cache-api.ts","config/optimizations.ts","utils/call-rate-limit.ts","utils/type-check.ts","hooks/useFetch.ts","config/data-table.ts","hooks/useTabularData.ts","components/svg/chevron-down.svg","components/styles/DataTable.ts","components/DataTable.tsx","utils/format.ts","components/styles/Loading.ts","components/Loading.tsx","components/styles/Search.ts","components/Search.tsx","components/styles/CovidStatistics.ts","components/CovidStatistics.tsx","config/api.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["canUseCache","self","writeCache","key","request","response","a","window","caches","open","put","readCache","cache","match","DEFAULT_FUNCTION_CALL_RATE_LIMIT","debounce","fn","lastTimeoutId","limit","args","context","this","clearTimeout","setTimeout","apply","isNumber","value","Number","isNaN","isFinite","initialResult","data","loading","error","fetchResultReducer","status","action","type","payload","Error","DEFAULT_SORT_DIRECTION","flipDirection","direction","filterData","options","filterKey","filterKeyword","pattern","RegExp","filter","item","test","String","sortData","sortKey","sortDirection","reverse","sort","z","aValue","zValue","compareNumericData","localeCompare","compareNonNumericData","StyledTable","StyledCell","StyledHeadCell","ChevronDown","StyledRowGroup","StyledHead","StyledBody","DataTableRow","columns","map","toLocaleString","DataTable","handleColumnClick","alias","className","undefined","onClick","country","StyledLoading","Loading","size","aria-label","width","height","viewBox","xmlns","stroke","fill","fill-rule","transform","stroke-width","stroke-opacity","cx","cy","r","d","attributeName","from","to","dur","repeatCount","StyledSearch","Search","handleChange","useState","keyword","setKeyword","placeholder","onInput","event","preventDefault","target","onChange","StyledCovidStatHeader","StyledCovidStatTitle","StyledCovidStatBody","StyledCovidStatScroll","CovidStatTable","uri","cacheKey","cacheMaxAge","useReducer","dispatch","cacheRef","useRef","timestamp","useEffect","hasCache","current","cacheIsValid","Date","now","Request","cachedResponse","fetch","ok","clone","json","getData","useFetch","rowData","dataOptions","setDataOptions","processedData","useMemo","processed","previousOptions","handleKeywordChange","useTabularData","message","App","CovidStatistics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abd86910.chunk.js","sourcesContent":["function canUseCache(): boolean {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  return 'caches' in self;\r\n}\r\n\r\nexport async function writeCache(\r\n  key: string,\r\n  request: Request,\r\n  response: Response,\r\n): Promise<boolean> {\r\n  if (!canUseCache()) return false;\r\n  const cache = await window.caches.open(key);\r\n  cache.put(request, response);\r\n  return true;\r\n}\r\n\r\nexport async function readCache(\r\n  key: string,\r\n  request: Request,\r\n): Promise<Response | undefined | null> {\r\n  if (!canUseCache()) return null;\r\n  const cache = await window.caches.open(key);\r\n  return cache.match(request);\r\n}\r\n","export const DEFAULT_FUNCTION_CALL_RATE_LIMIT = 100;\r\n","import { DEFAULT_FUNCTION_CALL_RATE_LIMIT } from '../config/optimizations';\r\n\r\nexport function throttle(\r\n  fn: (...args: any[]) => void,\r\n  limit = DEFAULT_FUNCTION_CALL_RATE_LIMIT,\r\n) {\r\n  let lastCall: number;\r\n  let lastTimeoutId: number;\r\n\r\n  return function throttledFn(this: unknown, ...args: any[]) {\r\n    const context = this;\r\n    if (!lastCall) {\r\n      fn.apply(context, args);\r\n      lastCall = Date.now();\r\n    } else {\r\n      const elapsed = Date.now() - lastCall;\r\n      window.clearTimeout(lastTimeoutId);\r\n      lastTimeoutId = window.setTimeout(function call() {\r\n        if (elapsed >= limit) {\r\n          fn.apply(context, args);\r\n          lastCall = Date.now();\r\n        }\r\n      }, limit - elapsed);\r\n    }\r\n  };\r\n}\r\n\r\nexport function debounce(\r\n  fn: (...args: any[]) => void,\r\n  limit = DEFAULT_FUNCTION_CALL_RATE_LIMIT,\r\n) {\r\n  let lastTimeoutId: number;\r\n\r\n  return function debouncedFn(this: unknown, ...args: any[]) {\r\n    const context = this;\r\n    window.clearTimeout(lastTimeoutId);\r\n    lastTimeoutId = window.setTimeout(() => {\r\n      fn.apply(context, args);\r\n    }, limit);\r\n  };\r\n}\r\n","export function isNumber(value: unknown): value is number {\r\n  // Exclude NaN and Infinity, -Infinity from numeric values.\r\n  return (\r\n    typeof value === 'number' && !Number.isNaN(value) && Number.isFinite(value)\r\n  );\r\n}\r\n","import { useEffect, useReducer, useRef } from 'react';\r\n\r\nimport { readCache, writeCache } from '../utils';\r\n\r\n/** Type of data that can be fetched from a JSON response. */\r\ntype JsonValue = string | number | boolean | null;\r\ntype JsonObject = Record<string | number, JsonValue>;\r\ntype JsonArrayOfObject = JsonObject[];\r\n\r\n/** Shallow schema of any JSON data. */\r\ntype JsonData = JsonObject | JsonArrayOfObject;\r\n\r\n/** Return value of `useFetch` hook. */\r\ntype FetchResult = {\r\n  data: JsonData | null;\r\n  loading: boolean;\r\n  error: Error | null;\r\n};\r\n\r\n/** Default return value of `useFetch` hook. */\r\nconst initialResult: FetchResult = {\r\n  data: null,\r\n  loading: true,\r\n  error: null,\r\n};\r\n\r\n/** Action for fetchResultReducer */\r\ntype Action =\r\n  | { type: 'setLoading' }\r\n  | { type: 'setError'; payload: Error }\r\n  | { type: 'setData'; payload: JsonData };\r\n\r\n/** Update `fetchResult` object based on the action type. */\r\nconst fetchResultReducer = (\r\n  status: FetchResult,\r\n  action: Action,\r\n): FetchResult => {\r\n  switch (action.type) {\r\n    case 'setError':\r\n      return { ...status, loading: false, error: action.payload };\r\n\r\n    case 'setData':\r\n      return { ...status, loading: false, data: action.payload };\r\n\r\n    default:\r\n      throw new Error('Unhandled action type.');\r\n  }\r\n};\r\n\r\ntype UseFetchOptions = {\r\n  cacheKey?: string;\r\n  cacheMaxAge?: number;\r\n};\r\n\r\n/**\r\n * Hook for\r\n * 1. Declarative data fetch.\r\n * 2. Use Cache API: https://developer.mozilla.org/en-US/docs/Web/API/Cache\r\n *\r\n * @todo Correct type capturing :)\r\n */\r\nexport const useFetch = <T extends JsonData>(\r\n  uri: string,\r\n  { cacheKey, cacheMaxAge }: UseFetchOptions = {},\r\n) => {\r\n  const [{ data, loading, error }, dispatch] = useReducer(\r\n    fetchResultReducer,\r\n    initialResult,\r\n  );\r\n  const cacheRef = useRef({\r\n    key: cacheKey,\r\n    timestamp: 0,\r\n  });\r\n\r\n  // Fetch data.\r\n  useEffect(() => {\r\n    async function getData(): Promise<void> {\r\n      // Validate cache.\r\n      const hasCache = cacheRef.current.key && cacheMaxAge;\r\n      const cacheIsValid =\r\n        Date.now() - cacheRef.current.timestamp < (cacheMaxAge || 0);\r\n      // Try to find previously cached response.\r\n      const request = new Request(uri);\r\n      const cachedResponse =\r\n        hasCache && cacheIsValid\r\n          ? await readCache(cacheRef.current.key!, request)\r\n          : null;\r\n      // Otherwise, fetch new data.\r\n      const response = cachedResponse ?? (await fetch(request));\r\n      // Something went wrong x(\r\n      if (!response.ok) {\r\n        const error = new Error(`Request failed: ${uri}`);\r\n        dispatch({ type: 'setError', payload: error });\r\n        return;\r\n      }\r\n      // Cache the data.\r\n      if (hasCache && !cacheIsValid) {\r\n        writeCache(cacheRef.current.key!, request, response.clone());\r\n      }\r\n      // Set the retrieved data.\r\n      const data = await response.json();\r\n      dispatch({ type: 'setData', payload: data });\r\n    }\r\n\r\n    getData();\r\n  }, [cacheMaxAge, dispatch, uri]);\r\n\r\n  return { data: data as T | null, loading, error };\r\n};\r\n","export const DEFAULT_SORT_DIRECTION = 'descending' as const;\r\n","import type { ChangeEvent, MouseEvent, TouchEvent } from 'react';\r\nimport { useMemo, useState } from 'react';\r\n\r\nimport { DEFAULT_SORT_DIRECTION } from '../config/data-table';\r\nimport { isNumber } from '../utils';\r\n\r\ntype SortDirection = 'ascending' | 'descending';\r\n\r\ntype DataOptions = {\r\n  /** Name of column to use for data filtering. */\r\n  filterKey: string | null;\r\n  /** Search keyword to filter data with. */\r\n  filterKeyword: string | null;\r\n  /** Name of column to use for data sorting. */\r\n  sortKey: string | null;\r\n  /** Direction of data sorting. */\r\n  sortDirection: SortDirection;\r\n};\r\n\r\n/** Tabular data */\r\nexport const useTabularData = (\r\n  rowData: Record<string, TODO>[] | null,\r\n  options: Partial<DataOptions> = {},\r\n) => {\r\n  const [dataOptions, setDataOptions] = useState<DataOptions>({\r\n    filterKey: null,\r\n    filterKeyword: null,\r\n    sortKey: null,\r\n    sortDirection: DEFAULT_SORT_DIRECTION,\r\n    ...options,\r\n  });\r\n\r\n  /** Processed table data (sorted, filtered and memoized.) */\r\n  const processedData = useMemo(() => {\r\n    // Data not yet provided because of network latency.\r\n    if (!rowData) return null;\r\n    // Create a copy of the raw data. // TODO: deep copy? we need it?\r\n    let processed = [...rowData];\r\n    // Filter data.\r\n    // Faster process should be done first, as it reduces the data to process ahead of time.\r\n    processed = filterData(processed, dataOptions);\r\n    // Sort data.\r\n    processed = sortData(processed, dataOptions);\r\n    // Return the processed data.\r\n    return processed;\r\n  }, [dataOptions, rowData]);\r\n\r\n  /** Sort data on clicking on column headings.  */\r\n  const handleColumnClick = (sortKey: string) => (\r\n    event: MouseEvent | TouchEvent,\r\n  ) => {\r\n    // Just in case the heading is an interactive element, e.g. <a />\r\n    event.preventDefault();\r\n\r\n    setDataOptions(previousOptions => {\r\n      if (previousOptions.sortKey === sortKey) {\r\n        return {\r\n          ...previousOptions,\r\n          sortDirection: flipDirection(previousOptions.sortDirection),\r\n        };\r\n      }\r\n      return {\r\n        ...previousOptions,\r\n        sortKey,\r\n        sortDirection: DEFAULT_SORT_DIRECTION,\r\n      };\r\n    });\r\n  };\r\n\r\n  /** Filter data on clicking on column headings. */\r\n  const handleKeywordChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setDataOptions(previousOptions => ({\r\n      ...previousOptions,\r\n      filterKeyword: value || null,\r\n    }));\r\n  };\r\n\r\n  return {\r\n    processedData,\r\n    dataOptions,\r\n    handleColumnClick,\r\n    handleKeywordChange,\r\n  };\r\n};\r\n\r\nfunction flipDirection(direction: SortDirection): SortDirection {\r\n  return direction === 'ascending' ? 'descending' : 'ascending';\r\n}\r\n\r\nfunction filterData<T extends Record<string, unknown>>(\r\n  data: T[],\r\n  options: Pick<DataOptions, 'filterKey' | 'filterKeyword'>,\r\n): T[] {\r\n  const { filterKey, filterKeyword } = options;\r\n  // Return the data as-is, if no filtering option is set.\r\n  if (!filterKey || !filterKeyword) return data;\r\n  // Filter items in data, that matches the search keyword. (case-insensitive)\r\n  const pattern = new RegExp(filterKeyword, 'i');\r\n  const matchesPattern = (value: unknown) => pattern.test(String(value));\r\n  return data.filter(item => matchesPattern(item[filterKey]));\r\n}\r\n\r\nfunction sortData<T extends Record<string, unknown>>(\r\n  data: T[],\r\n  options: Pick<DataOptions, 'sortKey' | 'sortDirection'>,\r\n): T[] {\r\n  const { sortKey, sortDirection } = options;\r\n  // Return the data as-is, if no sort option is set.\r\n  if (!sortKey) return data;\r\n\r\n  const reverse = sortDirection === 'descending';\r\n\r\n  return data.sort((a, z) => {\r\n    const aValue = a[sortKey];\r\n    const zValue = z[sortKey];\r\n\r\n    return isNumber(aValue) && isNumber(zValue)\r\n      ? compareNumericData(aValue, zValue, reverse)\r\n      : compareNonNumericData(aValue, zValue, reverse);\r\n  });\r\n}\r\n\r\nfunction compareNumericData(a: number, z: number, reverse = false) {\r\n  return reverse ? z - a : a - z;\r\n}\r\n\r\nfunction compareNonNumericData(a: unknown, z: unknown, reverse = false) {\r\n  return reverse\r\n    ? String(z).localeCompare(String(a))\r\n    : String(a).localeCompare(String(z));\r\n}\r\n","export default __webpack_public_path__ + \"static/media/chevron-down.24c82cb7.svg\";","import styled from '@emotion/styled';\r\n\r\nimport ChevronDown from '../svg/chevron-down.svg';\r\n\r\nexport const StyledTable = styled.div`\r\n  position: relative;\r\n  min-width: 40em;\r\n`;\r\n\r\nexport const StyledCell = styled.div`\r\n  padding: 0.75em 1em;\r\n  border: solid #ccc;\r\n  border-width: 0 0 1px 1px;\r\n`;\r\n\r\nexport const StyledHeadCell = styled(StyledCell)`\r\n  position: relative;\r\n  padding-top: 1em;\r\n  padding-bottom: 1em;\r\n  background-color: #eee;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n\r\n  &.is-sort-key::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    right: 1em;\r\n    bottom: 0;\r\n    display: block;\r\n    width: 1rem;\r\n    height: 1rem;\r\n    margin: auto;\r\n    background: url(${ChevronDown}) no-repeat center / 100% auto;\r\n  }\r\n\r\n  &.is-ascending::after {\r\n    transform: rotate(-0.5turn);\r\n  }\r\n`;\r\n\r\nexport const StyledRowGroup = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr);\r\n  box-sizing: border-box;\r\n  background: #fff;\r\n  border: solid #ccc;\r\n  border-width: 1px 1px 0 0;\r\n`;\r\n\r\nexport const StyledHead = styled(StyledRowGroup)`\r\n  position: sticky;\r\n  top: 0;\r\n`;\r\n\r\nexport const StyledBody = styled(StyledRowGroup)`\r\n  margin-top: -1px;\r\n`;\r\n","import type { FunctionComponent, MouseEvent, TouchEvent } from 'react';\r\nimport React from 'react';\r\n\r\nimport { formatValue } from '../utils';\r\nimport {\r\n  StyledBody,\r\n  StyledCell,\r\n  StyledHead,\r\n  StyledHeadCell,\r\n  StyledTable,\r\n} from './styles/DataTable';\r\n\r\ntype ColumnDefinition = {\r\n  key: string;\r\n  alias: string;\r\n};\r\n\r\n// Row --------------------\r\n\r\ninterface DataTableRowProps {\r\n  item: TODO;\r\n  columns: readonly ColumnDefinition[];\r\n}\r\n\r\nconst DataTableRow: FunctionComponent<DataTableRowProps> = ({\r\n  item,\r\n  columns,\r\n}) => {\r\n  return (\r\n    <>\r\n      {columns.map(({ key }) => (\r\n        <StyledCell key={key}>{formatValue(item[key])}</StyledCell>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// Table --------------------\r\n\r\ninterface DataTableProps {\r\n  data: TODO[] | null;\r\n  columns: readonly ColumnDefinition[];\r\n  sortKey?: string | null;\r\n  sortDirection?: 'ascending' | 'descending';\r\n  handleColumnClick?: (\r\n    sortKey: string,\r\n  ) => (event: MouseEvent | TouchEvent) => void;\r\n}\r\n\r\nconst DataTable: FunctionComponent<DataTableProps> = ({\r\n  data,\r\n  columns,\r\n  sortKey,\r\n  sortDirection,\r\n  handleColumnClick,\r\n}) => {\r\n  return (\r\n    <StyledTable>\r\n      <StyledHead>\r\n        {columns.map(({ key, alias }) => (\r\n          <StyledHeadCell\r\n            key={key}\r\n            className={\r\n              key === sortKey ? `is-sort-key is-${sortDirection}` : undefined\r\n            }\r\n            onClick={handleColumnClick ? handleColumnClick(key) : undefined}\r\n          >\r\n            {alias ?? key}\r\n          </StyledHeadCell>\r\n        ))}\r\n      </StyledHead>\r\n      <StyledBody>\r\n        {data &&\r\n          data.map(item => (\r\n            <DataTableRow key={item.country} item={item} columns={columns} />\r\n          ))}\r\n      </StyledBody>\r\n    </StyledTable>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import { isNumber } from './type-check';\r\n\r\nexport function formatValue(value: unknown): string {\r\n  if (isNumber(value)) {\r\n    return value.toLocaleString('kr');\r\n  }\r\n  return String(value);\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledLoading = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n","import type { FunctionComponent } from 'react';\r\nimport React from 'react';\r\n\r\nimport { StyledLoading } from './styles/Loading';\r\n\r\ninterface LoadingProps {\r\n  size?: number;\r\n}\r\n\r\n/* SVG-loaders | 2014 Sam Herbert, MIT License | https://github.com/SamHerbert/SVG-Loaders */\r\nconst Loading: FunctionComponent<LoadingProps> = ({ size = 64 }) => {\r\n  return (\r\n    <StyledLoading aria-label=\"Loading\">\r\n      <svg\r\n        width={size}\r\n        height={size}\r\n        viewBox=\"0 0 38 38\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        stroke=\"#3498DB\"\r\n      >\r\n        <g fill=\"none\" fill-rule=\"evenodd\">\r\n          <g transform=\"translate(1 1)\" stroke-width=\"2\">\r\n            <circle stroke-opacity=\".5\" cx=\"18\" cy=\"18\" r=\"18\" />\r\n            <path d=\"M36 18c0-9.94-8.06-18-18-18\">\r\n              <animateTransform\r\n                attributeName=\"transform\"\r\n                type=\"rotate\"\r\n                from=\"0 18 18\"\r\n                to=\"360 18 18\"\r\n                dur=\"1s\"\r\n                repeatCount=\"indefinite\"\r\n              />\r\n            </path>\r\n          </g>\r\n        </g>\r\n      </svg>\r\n    </StyledLoading>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledSearch = styled.input`\r\n  display: block;\r\n  width: 15em;\r\n  padding: 0.75em 1em;\r\n  background: #fff;\r\n  border: 1px solid #ccc;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  transition: width 0.1s;\r\n\r\n  &:focus {\r\n    width: 25em;\r\n    outline: 0;\r\n    border-color: #000;\r\n  }\r\n`;\r\n","import type { ChangeEvent, FormEvent, FunctionComponent } from 'react';\r\nimport React, { useState } from 'react';\r\n\r\nimport { debounce } from '../utils/call-rate-limit';\r\nimport { StyledSearch } from './styles/Search';\r\n\r\ninterface SearchProps {\r\n  handleChange(event: ChangeEvent<HTMLInputElement>): void;\r\n}\r\n\r\nconst Search: FunctionComponent<SearchProps> = ({ handleChange }) => {\r\n  // Search keyword\r\n  const [keyword, setKeyword] = useState('');\r\n\r\n  const handleKeywordInput = (event: FormEvent<HTMLInputElement>) => {\r\n    event.preventDefault();\r\n    setKeyword((event.target as HTMLInputElement).value);\r\n  };\r\n\r\n  return (\r\n    <StyledSearch\r\n      type=\"search\"\r\n      value={keyword}\r\n      placeholder=\"국가로 검색\"\r\n      onInput={handleKeywordInput}\r\n      onChange={debounce(handleChange, 300)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const StyledCovidStatHeader = styled.div`\r\n  height: 4rem;\r\n  margin-bottom: 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nexport const StyledCovidStatTitle = styled.h1`\r\n  margin: 0;\r\n  flex: 1 1 auto;\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\nexport const StyledCovidStatBody = styled.div`\r\n  height: calc(100vh - 8rem);\r\n  overflow: auto;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n`;\r\n\r\nexport const StyledCovidStatScroll = styled.div`\r\n  position: relative;\r\n  min-width: 50em;\r\n  height: 100%;\r\n`;\r\n","import type { FunctionComponent } from 'react';\r\nimport React from 'react';\r\n\r\nimport { API_COVID_19_ALL_COUNTRY } from '../config/api';\r\nimport { useFetch } from '../hooks/useFetch';\r\nimport { useTabularData } from '../hooks/useTabularData';\r\nimport type { CountryData } from '../models/covid-19-api';\r\nimport DataTable from './DataTable';\r\nimport Loading from './Loading';\r\nimport Search from './Search';\r\nimport {\r\n  StyledCovidStatBody,\r\n  StyledCovidStatHeader,\r\n  StyledCovidStatScroll,\r\n  StyledCovidStatTitle,\r\n} from './styles/CovidStatistics';\r\n\r\nconst columns = [\r\n  { key: 'country', alias: '국가' },\r\n  { key: 'confirmed', alias: '확진자' },\r\n  { key: 'recovered', alias: '완치자' },\r\n  { key: 'critical', alias: '치명적' },\r\n  { key: 'deaths', alias: '사망자' },\r\n];\r\n\r\nconst CovidStatTable: FunctionComponent = () => {\r\n  const { data, loading, error } = useFetch<CountryData[]>(\r\n    API_COVID_19_ALL_COUNTRY,\r\n    { cacheKey: 'covid19-country-all', cacheMaxAge: 60 * 60 * 1000 }, // 1 hour cache\r\n  );\r\n  const {\r\n    processedData,\r\n    dataOptions: { sortKey, sortDirection },\r\n    handleColumnClick,\r\n    handleKeywordChange,\r\n  } = useTabularData(data, {\r\n    filterKey: 'country',\r\n    sortKey: 'country',\r\n    sortDirection: 'ascending',\r\n  });\r\n\r\n  const renderTable = () => {\r\n    if (loading) return <Loading />;\r\n    if (error) return <p>{error.message}</p>;\r\n    if (!data) return <p>No data!</p>;\r\n    return (\r\n      <DataTable\r\n        data={processedData}\r\n        columns={columns}\r\n        sortKey={sortKey}\r\n        sortDirection={sortDirection}\r\n        handleColumnClick={handleColumnClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledCovidStatHeader>\r\n        <StyledCovidStatTitle>코로나 바이러스 세계 현황</StyledCovidStatTitle>\r\n        <Search handleChange={handleKeywordChange} />\r\n      </StyledCovidStatHeader>\r\n      <StyledCovidStatBody>\r\n        <StyledCovidStatScroll>{renderTable()}</StyledCovidStatScroll>\r\n      </StyledCovidStatBody>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CovidStatTable;\r\n","export const API_COVID_19_ALL_COUNTRY = 'https://covid19-api.com/country/all';\r\n","import type { FunctionComponent } from 'react';\r\nimport React from 'react';\r\n\r\nimport CovidStatistics from './components/CovidStatistics';\r\n\r\nconst App: FunctionComponent = () => {\r\n  return <CovidStatistics />;\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}